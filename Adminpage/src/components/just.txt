Perfect! Ungal requirement clear:

✅ Login Page  
➡️ Based on role (`admin`, `trainee`, `trainer`) different dashboard page open aaganum.  
React + Routing + Role-based navigation use pannanum.

Here’s a *basic working example* using React + React Router:

---

*1. Install Required Packages*
```bash
npm install react-router-dom
```

---

*2. `App.jsx`*
```jsx
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Login from './Login';
import AdminDashboard from './AdminDashboard';
import TraineeDashboard from './TraineeDashboard';
import TrainerDashboard from './TrainerDashboard';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Login />} />
        <Route path="/admin" element={<AdminDashboard />} />
        <Route path="/trainee" element={<TraineeDashboard />} />
        <Route path="/trainer" element={<TrainerDashboard />} />
        <Route path="*" element={<Navigate to="/" />} />
      </Routes>
    </Router>
  );
}

export default App;
```

---

*3. `Login.jsx`*
```jsx
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';

function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();
  const handleLogin = (e) => {
    e.preventDefault();

    // Mock role logic (replace with API call)
    if (email === 'admin@site.com' && password === 'admin') {
      navigate('/admin');
    } else if (email === 'trainee@site.com' && password === 'trainee') {
      navigate('/trainee');
    } else if (email === 'trainer@site.com' && password === 'trainer') {
      navigate('/trainer');
    } else {
      alert('Invalid credentials');
    }
  };

  return (
    <form onSubmit={handleLogin}>
      <h2>Login</h2>
      <input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} required />
      <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} required />
      <button type="submit">Login</button>
    </form>
  );
}

export default Login;
```

---

*4. Dummy Dashboards*
Example: `AdminDashboard.jsx`
```jsx
function AdminDashboard() {
  return <h2>Welcome Admin!</h2>;
}
export default AdminDashboard;
```
Create similar for `TraineeDashboard` and `TrainerDashboard`.

---

Ippa unga role-based redirection working aagum!  
If you use API/backend, just replace the mock logic in `handleLogin` with real API call.

Need backend integration too? Solunga, athukkum code kudukuren.
onChange={(e) => setPassword(e.target.value)}
          required
        /><br/>
        <button type="submit">Sign In</button>
      </form>
    </div>
  );
}

export default Login;
```

---

*2. Styling (optional)*

Add to `App.css`:

```css
.login-container {
  width: 300px;
  margin: 100px auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 5px;
  text-align: center;
}
input {
  width: 90%;
  margin: 10px 0;
  padding: 8px;
}
button {
  width: 100%;
  padding: 10px;
  background: #007bff;
  color: white;
  border: none;
  cursor: pointer;
}
```

---

Let me know if you want to connect this with a backend API (e.g. Django, Node.js).